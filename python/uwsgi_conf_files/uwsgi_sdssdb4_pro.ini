#  -----------------------------------------------
# Configuration file for launching app with uWSGI
# -----------------------------------------------

# Each group contains parameters sent to uWSGI.
# When launched without any options, the group "uwsgi" is used:
#
# % uwsgi uwsgi.ini
#
# This is equivalent to as the program interprets the ".ini" extension.
#
# % uwsgi --ini uwsgi
#
# To launch with the other groups:
#
# % uwsgi --ini uwsgi.ini:petunia_dev
#
# Ref: http://projects.unbit.it/uwsgi/wiki/INIFiles

[uwsgi]
# base = /home/sdss4/products/Linux64/
# home = %(base)/autoscheduler/current/python/

home = $(AUTOSCHEDULER_DIR)/python/

socket = /tmp/uwsgi_autoscheduler.sock
chmod-socket = 666
master = true
sharedarea = 4
memory-report = true
daemonize = /var/www/autoscheduler/current/uwsgi_autoscheduler.log
pidfile = /var/www/autoscheduler/current/uwsgi_autoscheduler.pid
file = %(home)/run_autoscheduler_api.py
callable = app
module = web

# NOTE: jkp: note that this pythonpath should be dymanically created, and sent
# to uwsgi via the --pythonpath commandline directive. That way, we can fill it
# with the correct values post "module load".

# pythonpath = %(home)
# pythonpath = %(base)/sdss_python_module/current/python
# pythonpath = %(base)/Totoro/current

pythonpath = %(home)
pythonpath = $(TOTORO_DIR)

# This key/value will be read in the Flask application
# to indicate which server the application is running on.
# Don't add more server-specific options here; place them
# in the petunia/server_config_files files.
flask-config-file = sdss-db4.local.cfg

env = DUST_DIR=/home/sdss4/products/NULL/dust/v0_1/
env = PLATELIST_DIR=/home/sdss4/products/NULL/platelist/trunk
